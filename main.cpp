#include"QInt.h"
#include "QFloat.h"
#include <fstream>
using namespace std;


template
<class T> void PrintBit(T a) {
	for (int i = 0; i < 128; i++)
		std::cout << a.getBit(127 - i);
	std::cout << "\n";
}
void TestRange() {

	Qfloat A,B;
<<<<<<< HEAD
	std::string a = "1189731495357231765085759326628007130763444687096510237472674821233261358180483686904488595472612039915115437484839309258897667381308687426274524698341565006080871634366004897522143251619531446845952345709482135847036647464830984784714280967845614138476044338404886122905286855313236158695999885790106357018120815363320780964323712757164290613406875202417365323950267880089067517372270610835647545755780793431622213451903817859630690311343850657539360649645193283178291767658965405285113556134369793281725888015908414675289832538063419234888599898980623114025121674472051872439321323198402942705341366951274739014593816898288994445173400364617928377138074411345791848573595077170437644191743889644885377684738322240608239079061399475675334739784016491742621485229014847672335977897158397334226349734811441653077758250988926030894789604676153104257260141806823027588003441951455327701598071281589597169413965608439504983171255062282026626200048042149808200002060993433681237623857880627479727072877482838438705048034164633337013385405998040701908662387301605018188262573723766279240798931717708807901740265407930976419648877869604017517691938687988088008944251258826969688364194133945780157844364946052713655454906327187428531895100278695119323496808703630436193927592692344820812834297364478686862064169042458555136532055050508189891866846863799917647547291371573500701015197559097453040033031520683518216494195636696077748110598284901343611469214274121810495077979275556645164983850062051066517084647369464036640569339464837172183352956873912042640003611618789278195710052094562761306703551840330110645101995435167626688669627763820604342480357906415354212732946756073006907088870496125050068156659252761297664065498347492661798824062312210409274584565587264846417650160123175874034726261957289081466197651553830744424709698634753627770356227126145052549125229448040149114795681359875968512808575244271871455454084894986155020794806980939215658055319165641681105966454159951476908583129721503298816585142073061480888021769818338417129396878371459575846052583142928447249703698548125295775920936450022651427249949580708203966082847550921891152133321048011973883636577825533325988852156325439335021315312134081390451021255363707903495916963125924201167877190108935255914539488216897117943269373608639074472792751116715127106396425081353553137213552890539802602978645319795100976432939091924660228878912900654210118287298298707382159717184569540515403029173307292454391789568674219640761451173600617752186991913366837033887201582071625868247133104513315097274713442728340606642890406496636104443217752811227470029162858093727701049646499540220983981932786613204254226464243689610107429923197638681545837561773535568984536053627234424277105760924864023781629665526314910906960488073475217005121136311870439925762508666032566213750416695719919674223210606724721373471234021613540712188239909701971943944347480314217903886317767779921539892177334344368907550318800833546852344370327089284147501640589448482001254237386680074457341910933774891959681016516069106149905572425810895586938833067490204900368624166301968553005687040285095450484840073528643826570403767157286512380255109954518857013476588189300004138849715883139866071547574816476727635116435462804401112711392529180570794193422686818353212799068972247697191474268157912195973794192807298886952361100880264258801320928040011928153970801130741339550003299015924978259936974358726286143980520112454369271114083747919007803406596321353417004068869443405472140675963640997405009225803505672726465095506267339268892424364561897661906898424186770491035344080399248327097911712881140170384182058601614758284200750183500329358499691864066590539660709069537381601887679046657759654588001937117771344698326428792622894338016112445533539447087462049763409147542099248815521395929388007711172017894897793706604273480985161028815458787911160979113422433557549170905442026397275695283207305331845419990749347810524006194197200591652147867193696254337864981603833146354201700628817947177518115217674352016511172347727727075220056177748218928597158346744541337107358427757919660562583883823262178961691787226118865632764934288772405859754877759869235530653929937901193611669007472354746360764601872442031379944139824366828698790212922996174192728625891720057612509349100482545964152046477925114446500732164109099345259799455690095576788686397487061948854749024863607921857834205793797188834779656273479112388585706424836379072355410286787018527401653934219888361061949671961055068686961468019035629749424086587195041004404915266476272761070511568387063401264136517237211409916458796347624949215904533937210937520465798300175408017538862312719042361037129338896586028150046596078872444365564480545689033575955702988396719744528212984142578483954005084264327730840985420021409069485412320805268520094146798876110414583170390473982488899228091818213934288295679717369943152460447027290669964066816";
	std::string b = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
/*	for (int i = 0; i < 128; i++)
=======
	std::string a = "00000000000000000000000000000000000000001001001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
	std::string b = "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
	for (int i = 0; i < 128; i++)
>>>>>>> master
	{
		A.setBit(127 - i, 0);
		B.setBit(127 - i, b[i] - '0');
	}
<<<<<<< HEAD
*/
	//A.setExponent((1 << 15) -2 );
	A = Qfloat::decToBin(a);

	
	//B.setExponent(0);
	//std::string s = Qfloat::binToDec(A);
	PrintBit(A);
	//std::cin >> s;
	//A = Qfloat::decToBin(s);
	/*std::cin >> s;
=======

	
	A.setExponent( (1 << 14)  - 1+  (1<<14) - 1);
	//B.setExponent(1 << 14 + 1 << 14);
	std::string s = Qfloat::binToDec(A);
	std::cout << s << "\n";

>>>>>>> master
	B = Qfloat::decToBin(s);
	//s = "148716436919653970635719915828500891345430585887063779684084352654157669772560460863061074434076504989389429685604913657362208422663585928284315587292695625760108954295750612190267906452441430855744043213685266980879580933103873098089285120980701767309505542300610765363160856914154519836999985723763294627265101920415097620540464094645536326675859400302170665493783485011133439671533826354455943219472599178952776681487977232453836288917981332192420081205649160397286470957370675660639194516796224160215736001988551834411229067257927404361074987372577889253140209309006484054915165399800367838167670868909342376824227112286124305646675045577241047142259301418223981071699384646304705523967986205610672210592290280076029884882674934459416842473002061467827685653626855959041997237144799666778293716851430206634719781373615753861848700584519138032157517725852878448500430243931915962699758910198699646176745701054938122896406882785253328275006005268726025000257624179210154702982235078434965884109685354804838131004270579167126673175749755087738582798412700627273532821715470784905099866464713600987717533175991372052456109733700502189711492335998511001118031407353371211045524266743222519730545618256589206931863290898428566486887534836889915437101087953804524240949086543102601604287170559835857758021130307319392066506881313523736483355857974989705943411421446687587626899694887181630004128940085439777061774454587009718513824785612667951433651784265226311884747409444580645622981257756383314635580921183004580071167433104646522919119609239005330000451452348659774463756511820345163337943980041263830637749429395953336083703470477575542810044738301919276591618344509125863386108812015631258519582406595162208008187293436582724853007789026301159323070698408105802206270015396984254340782744661135183274706444228843053088712329344203471294528390768131568640653681005018639349460169984496064101071905533983931931760611873269377599350872617401957256914895705210138245806769993934613572891215187912352073142759132685111002721227292302141174609796432446980756572892866055906212962318515661971990117056252831428406243697588525495760355943865236394016665131001496735454572228191665748606519540679916877664414016760173806377656920463487936989620390740525145984648763616906989317436027112139742908671701079884309099093889589390888299553135169194142151694111317475325372330664974387622054117386490582528609864112581776264785912287338422769964648071192564425378646663411556798973696084277455095181396700077219023373989170854629235900197758953233530891638064164387159339180341042575830361300812079513055402219101403433753645357261715962631205812442527622997741598326650531778308030461201263428740399704835193229695221691946123067006703404303034638220115608002972703708190789363863370061009184402125640142038983804990720313583254070776718802086964989959277901325840590171683904252701692589023529988712746492993043435039277237985789720972490192486522166793046113443789850104193356543046290886160518437705073681060250156779673335009307167738866721861494960127064508638268738196553226361948367354133436275612546078020787746069125710880035636931310605009191080478321300470894660814047531888744314857126684573523662500517356214485392483258943446852059590954389554432850550139088924066147571349274177835852294151599883621530962148934283519739024496724274100912360869045137610033032350165116005001491019246350141342667443750412376990622282492121794840785767997565014056796158889260468489875975425824540169177125508608680425684017584495455124675626153225438209090808136938283417408611553045570237207738362303023346311379418010049906040887238964110142521298022757325201844785525093772937541169812461483008323817457588633692172700235959880832219956823500242139721418087290803599077861792252014055691692430885932756220426143442762406101940174491173500963896502236862224213325534185123145128601932348488895122389177804194693646363180253299659461910400913166480677498843668476315500774274650073956518483399212031792233122700479143294275212578602243397189764402209294002063896543465965884402507022218527366074644793343067667138419803469739957570322985477907772370211473403264858204095616786096550732469359719983654441331741242237649201458625934044343295095575234055253922493017478045853587348776615374521774091078236465007201563668637560318245519005809740639305812591520513637418157474931961261947098585799685882743606843628107950990232229275724224648604347457034184889048573213303104547384044426285848377315925206741777486045132743708995131883585870183502379453718678010823399380125550614408309534095133813946048382925158017064654651426239557349543453118651988066742151367190058224787521926002192357789089880295129641167362073253518755824509859055545695560068211129196994462873549589968066026623017822310494250635533040966355123177502676133685676540100658565011768349859513801822896298809247811112403511477276741786036959964671242894057555878411333745508352";

	//A = Qfloat::decToBin(s);
	PrintBit(B);


	//PrintBit(B);
	//s = ""

	//std::cout << s;
	
	system("pause");
}
<<<<<<< HEAD
void TestToken() {
	std::string s = "10 1 + 210624583337114373395836055367340864637790190801098222508621955071";
	std::cout <<QInt::getToken(s);
	system("pause");
}
int main(int argc, char const *argv[])
{
	TestRange();
	//TestQInt();
	//TestToken();
	return 0;
    /* code */
	/*std::string s;
	getline(std::cin,s);
	
	std::cout << QInt::getToken(s);
	*/
	

	//std::string s;
	// getline(std::cin,s);
	
	// std::cout << QInt::getToken(s);

	/*
	Qfloat x = Qfloat();
	Qfloat::scanQfloat(x);

	std::cout << Qfloat::binToDec(x);
=======


int main(int argc, char const *argv[])
{
	TestRange();
	return 0 ;
	fstream input ;
	ofstream output;
>>>>>>> master

	if(argc == 4)
	{
		string temp="";
		
		input.open(argv[1]);
		output.open(argv[2]);
		if (input.is_open())
  		{
			
			if(argv[3][0] == '1')
			{

				while(getline(input,temp))
				{
					cout<<temp;
					output<< QInt::getToken(temp)<<"\n";
				}
				
			}
			else if(argv[3][0] =='2')
			{
				while(getline(input,temp))
				{
					output<< Qfloat::Token(temp);
				}
			}
		

		}
	}

	input.close();
	output.close();
	return 0;
    
}
